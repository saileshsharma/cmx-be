

services:
  postgres:
    image: postgres:15-alpine
    container_name: cmx-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - cmx-net

  kafka:
    image: bitnami/kafka:3.8
    container_name: cmx-kafka
    restart: unless-stopped
    environment:
      # --- KRaft (no ZooKeeper) ---
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_BROKER_ID: "1"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"

      # --- Listeners ---
      # INTERNAL: for containers on the cmx-net (e.g., cmx-be uses kafka:29092)
      # EXTERNAL: for host tools (e.g., kafkacat, local apps) via localhost:9092
      # CONTROLLER: for KRaft
      KAFKA_CFG_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"

      # Convenience
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"

    ports:
      - "9092:9092"   # Host access
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 10s
      retries: 15
    networks:
      - cmx-net

  cmx-be:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cmx-be
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      # --- Spring DB ---
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}

      # Optional JPA tuning (override with your own)
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect

      # --- Kafka bootstrap (service name + INTERNAL listener port) ---
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

      # Optional: expose active profile
      SPRING_PROFILES_ACTIVE: docker

      # If you use CORS wide-open in dev
      # CMX_CORS_ALLOW_ALL: "true"
    ports:
      - "8080:8080"
    networks:
      - cmx-net

  # Optional: pgAdmin (uncomment to use)
  # pgadmin:
  #   image: dpage/pgadmin4:8
  #   container_name: cmx-pgadmin
  #   restart: unless-stopped
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
  #   ports:
  #     - "5050:80"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - cmx-net

volumes:
  pgdata:

networks:
  cmx-net:
    driver: bridge
