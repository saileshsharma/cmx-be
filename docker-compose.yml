version: "3.8"

services:
  db:
    image: postgres:16
    container_name: cmx-postgres
    environment:
      POSTGRES_DB: cmx
      POSTGRES_USER: cmx_user
      POSTGRES_PASSWORD: cmx_pass
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cmx_user -d cmx"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  cmx-be:
    build: .
    image: cmx-be:latest
    container_name: cmx-be
    depends_on:
      db:
        condition: service_healthy
    environment:
      # --- Spring profile/port/timezone ---
      SPRING_PROFILES_ACTIVE: "dev"     # <-- dev/open profile (no OAuth)
      SERVER_PORT: "8080"
      TZ: "Asia/Singapore"

      # --- Database ---
      SPRING_DATASOURCE_URL: "jdbc:postgresql://db:5432/cmx"
      SPRING_DATASOURCE_USERNAME: "cmx_user"
      SPRING_DATASOURCE_PASSWORD: "cmx_pass"

      # --- JPA (use validate or update for local dev) ---
      SPRING_JPA_HIBERNATE_DDL_AUTO: "validate"

      # --- Kafka (host broker on Docker Desktop) ---
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "host.docker.internal:9092"
      # If you don't have Kafka running, you can omit this or point to a mock.

      # --- CORS (Spring GraphQL CORS) ---
      SPRING_GRAPHQL_CORS_ALLOWED_ORIGINS: "http://localhost:5173,https://cmx-fe.onrender.com"
      SPRING_GRAPHQL_CORS_ALLOWED_METHODS: "GET,POST"
      SPRING_GRAPHQL_CORS_ALLOWED_HEADERS: "*"
      SPRING_GRAPHQL_CORS_ALLOW_CREDENTIALS: "true"

      # --- Optional: OTEL ---
      # OTEL_EXPORTER_OTLP_ENDPOINT: "http://host.docker.internal:4317"
    ports:
      - "8080:8080"
    restart: unless-stopped

volumes:
  pgdata:
