

# ===============================
# Database (PostgreSQL required)
# ===============================
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:cmx_new_db1}
spring.datasource.username=${DB_USER:producer_user}
spring.datasource.password=${DB_PASSWORD:PRODUCER_USER}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Exclude Keycloak, Kafka, and Redis - keep only database
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration

# ===============================
# GraphQL CORS
# ===============================
spring.graphql.cors.allowed-origins=http://localhost:5173,http://localhost:3000
spring.graphql.cors.allowed-methods=GET,POST
spring.graphql.cors.allowed-headers=*
spring.graphql.cors.allow-credentials=true

# ===============================
# OpenTelemetry
# ===============================
otel.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT}

# ===============================
# Kafka - Disabled for development
# ===============================
spring.kafka.enabled=false
# spring.kafka.bootstrap-servers=${KAFKA_BROKERS}

# ===============================
# Security (Keycloak) - Disabled for development
# ===============================
security.oauth2.enabled=false
# spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}
# spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID}
# spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET}
# spring.security.oauth2.client.registration.keycloak.authorization-grant-type=client_credentials
# spring.security.oauth2.client.provider.keycloak.token-uri=${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/token

management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health,env
management.endpoint.env.post.enabled=false
