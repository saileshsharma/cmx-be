
schema {
  query: Query
  mutation: Mutation
}

# ----------------
# Root queries
# ----------------
type Query {
  getAllClaims: [Claim!]!
  getClaimById(id: ID!): Claim
  getClaimsByStatus(status: ClaimStatus!): [Claim!]!
  getClaimsByPolicyNumber(policyNumber: String!): [Claim!]!

  # FIX: remove stray newline + bracket
  getAllFnol: [FnolDetails!]!
  getFnolById(id: ID!): FnolDetails
  getSurveyor(id: ID!): Surveyor
  getAllPolicies: [Policy!]!
  getPolicyById(id: ID!): Policy
  getPolicyByNumber(policyNumber: String!): Policy
  getPolicyByStatus(policyStatus: String!): [Policy!]!
  getAllSurveyors: [Surveyor!]!
  getSurveyorsById(id: ID!): [Surveyor!]!
  getSurveyorsByStatus(status: SurveyorStatus): [Surveyor!]!
  getSurveyorsByJobStatus(jobStatus: SurveyorJobStatus): [Surveyor!]!
}




extend type Query {
  policyByLicensePlate(plate: String!): PolicyLookup      # best active match (null if none)
  policiesByLicensePlate(plate: String!, includeInactive: Boolean = false): [PolicyLookup!]!
}





# schema.graphqls (additions)
type PolicyLookup {
  policyId: ID
  vehicleId: ID
  policyNumber: String!
  policyStatus: String!
  coverageType: String
  startDate: String
  endDate: String
  insuredName: String
  registrationNumber: String
}





# ----------------
# Mutations
# ----------------
type Mutation {

    duplicateClaim(id: ID!): Claim!

  updateClaim(id: ID!, input: UpdateClaimInput!): Claim!
  updateClaimStatus(id: ID!, status: ClaimStatus!): Claim
  updateAllClaimsStatus(status: ClaimStatus!): [Claim!]!

  updateSurveyor(id: ID!, input: UpdateSurveyorInput!): Surveyor
  createAddress(input: CreateAddressInput!): Address
  updateFnol(
    id: ID!
    fnolState: FNOLState
    severity: ClaimSeverity
    description: String
  ): FnolDetails

  createFnol(
    policyNumber: String!
    registrationNumber: String!
    accidentLocationId: ID!
    description: String!
    severity: ClaimSeverity!
    policeReportNo: String
    accidentDate: String!
  ): CreateFnolPayload

  linkAttachmentsToFnol(fnolId: ID!, attachmentIds: [ID!]!): Boolean!
}

# ----------------
# Payloads
# ----------------
type CreateFnolPayload {
  fnol: FnolDetails
}

# ----------------
# Inputs
# ----------------
# RECOMMENDED: Do NOT include `id` here since you pass it as a top-level arg
input UpdateClaimInput {
  claimStatus: ClaimStatus
  claimAmount: Float
  incidentDate: String
  claimDate: String
  dateReported: String
  claimSeverity: ClaimSeverity
  location: String
}

input UpdateSurveyorInput {
  name: String
  email: String
  phoneNumber: String
  rating_avg: Float
  app_version: String
  capacityPerDay: Int
  activeJobsCount: Int
  skills: String
  city: String
  province: String
  country: String
  internal: Boolean
  status: SurveyorStatus
  isActive: Boolean
}

input CreateAddressInput {
  addressLine1: String
  addressLine2: String
  city: String
  province: String
  postalCode: String
  country: String
  latitude: Float
  longitude: Float
  googlePlaceId: String
  locationType: LocationType
}

# ----------------
# Types
# ----------------
type Claim {
  id: ID!
  claimDate: String
  claimAmount: Float!
  claimStatus: ClaimStatus!
  status: ClaimStatus @deprecated(reason: "Use claimStatus")
  claimNumber: String!
  incidentDate: String
  dateReported: String
  location: String
  claimSeverity: ClaimSeverity

  fnol: FnolDetails
  vehicle: Vehicle
  surveyor: Surveyor
  address: Address
  createdAt: String
}

type FnolDetails {
  id: ID!
  fnolReferenceNo: String
  accidentDate: String
  description: String
  policeReportNo: String
  severity: ClaimSeverity
  fnolState: FNOLState
  createdAt: String

  surveyor: Surveyor
  policy: Policy
  vehicle: Vehicle
  insured: Insured

  accidentLocation: Address
}

type Policy {
  id: ID!
  policyType: PolicyType!
  policyNumber: String!
  premium: Float
  sumInsured: Float
  coverageType: String
  policyStatus: PolicyStatus!
  lob: String
  startDate: String!
  endDate: String!
  insured: Insured
  vehicle: Vehicle
  claims: [Claim!]
  address: Address
}

type Vehicle {
  id: ID!
  registrationNumber: String
  make: String
  model: String
  chassis: String
  year: Int
  vin: String
  color: String
  bodyType: String
  engineNo: String
  fuelType: String
  usageType: String
  ownerName: String
  ownerContact: String
  registrationState: String
  createdAt: String
  insured: Insured
}

type Insured {
  insuredId: ID!
  firstName: String
  lastName: String
  dob: String
  gender: String
  nationalId: String
  passportNumber: String
  email: String
  phoneNumber: String
  addressLine1: String
  addressLine2: String
  city: String
  province: String
  postalCode: String
  country: String
  driverLicenseNo: String
  licenseIssueDate: String
  licenseExpiryDate: String
  occupation: String
  maritalStatus: String
  yearsDriving: String
  address: Address
  createdAt: String
  updatedAt: String
}

type Address implements Node & GeoPoint & Timestamps {
  id: ID!
  addressLine1: String
  addressLine2: String
  city: String
  province: String
  postalCode: String
  country: String
  latitude: Float
  longitude: Float
  googlePlaceId: String
  locationType: LocationType
  createdAt: String
  updatedAt: String
}

type Surveyor {
  id: ID!
  name: String
  email: String
  phoneNumber: String
  currentLat: Float
  currentLng: Float
  rating_avg: String
  app_version: String
  capacityPerDay: String
  activeJobsCount: String
  skills: String
  createdAt: String
  updatedAt: String
  city: String
  province: String
  country: String
  internal: String
  isActive: String
  status: SurveyorStatus
  surveyorJobStatus: SurveyorJobStatus
  fnol: FnolDetails
}

type Subscription {
  surveyorLocationUpdated: SurveyorLocationEvent!
}

type SurveyorLocationEvent {
  id: ID!
  name: String!
  status: String
  surveyorJobStatus: String
  lat: Float!
  lng: Float!
  heading: Float
  speed: Float
  updatedAt: String
}

extend type Query {
  latestFnol(policyNumber: String!, registrationNumber: String!): FnolDetails
}
